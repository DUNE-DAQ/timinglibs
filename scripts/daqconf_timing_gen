#!/usr/bin/env python3

import json
import os
import math
import sys
import glob
import rich.traceback
from rich.console import Console
from os.path import exists, join
from daqconf.core.system import System
from daqconf.core.metadata import write_metadata_file
from daqconf.core.config_file import generate_cli_from_schema

# Add -h as default help option
CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])

console = Console()

# Set moo schema search path
from dunedaq.env import get_moo_model_path
import moo.io
moo.io.default_load_path = get_moo_model_path()

import click

@click.command(context_settings=CONTEXT_SETTINGS)
@generate_cli_from_schema('timinglibs/confgen.jsonnet', 'timing_gen')
@click.option('--debug', default=False, is_flag=True, help="Switch to get a lot of printout and dot files")
@click.argument('json_dir', type=click.Path())
def cli(config, debug, json_dir):

    if exists(json_dir):
        raise RuntimeError(f"Directory {json_dir} already exists")

    config_data = config[0]
    config_file = config[1]

    # Get our config objects
    # Loading this one another time... (first time in config_file.generate_cli_from_schema)
    moo.otypes.load_types('timinglibs/confgen.jsonnet')
    import dunedaq.timinglibs.confgen as confgen
    moo.otypes.load_types('daqconf/confgen.jsonnet')
    import dunedaq.daqconf.confgen as daqconf

    ## Hack, we shouldn't need to do that, in the future it should be, boot = config_data.boot
    boot = daqconf.boot(**config_data.boot)
    if debug: console.log(f"boot configuration object: {boot.pod()}")

    ## etc...
    thi = confgen.timing_hardware_interface(**config_data.timing_hardware_interface)
    if debug: console.log(f"timing_hardware_interface configuration object: {thi.pod()}")

    tmc = confgen.timing_master_controller(**config_data.timing_master_controller)
    if debug: console.log(f"tmc configuration object: {tmc.pod()}")

    tfc = confgen.timing_fanout_controller(**config_data.timing_fanout_controller)
    if debug: console.log(f"timing_fanout_controller configuration object: {readout.pod()}")

    if boot.use_k8s and not boot.image:
        raise Exception("You need to provide an --image if running with k8s")

    console.log("Loading timing hardware config generator")
    from timinglibs.apps.thi_gen import get_thi_app

    console.log("Loading timing master controller generator")
    from timinglibs.apps.tmc_gen import get_tmc_app

    console.log("Loading timing fanout controller generator")
    from timinglibs.apps.tfc_gen import get_tfc_app

    console.log(f"Generating configs for global thi host {thi.host_thi}")

    the_system = System(first_port=thi.port_thi)
    # the timing hardware interface application
    the_system.apps["thi"] = get_thi_app( # TODO pass directly thi, tmc and tfc
        FIRMWARE_TYPE         = thi.firmware_type,
        GATHER_INTERVAL       = thi.gather_interval,
        GATHER_INTERVAL_DEBUG = thi.gather_interval_debug,
        CONNECTIONS_FILE      = thi.timing_hw_connections_file,
        MASTER_DEVICE_NAME    = tmc.master_device_name,
        FANOUT_DEVICE_NAME    = tfc.fanout_device_name,
        HSI_DEVICE_NAME       = thi.hsi_device_name,
        TIMING_PORT           = thi.port_thi,
        HOST                  = thi.host_thi,
        DEBUG                 = debug
    )
    conf_order=['thi']

    if tmc.master_device_name:
        the_system.apps["tmc"] = get_tmc_app( ## TODO
            MASTER_DEVICE_NAME          = tmc.master_device_name,
            MASTER_ENDPOINT_SCAN_PERIOD = tmc.master_endpoint_scan_period,
            MASTER_CLOCK_FILE           = tmc.master_clock_file,
            MASTER_CLOCK_MODE           = tmc.master_clock_mode,
            MONITORED_ENDPOINTS         = tmc.monitored_endpoints,
            TIMING_HOST                 = thi.host_thi,
            TIMING_PORT                 = thi.port_thi,
            HOST                        = tmc.host_tmc,
            DEBUG                       = debug
        )
        conf_order.append('tmc')

    if tfc.fanout_device_name:
        the_system.apps["tfc"] = get_tfc_app( ## TODO
            FANOUT_DEVICE_NAME = tfc.fanout_device_name,
            FANOUT_CLOCK_FILE  = tfc.fanout_clock_file,
            TIMING_HOST        = thi.host_thi,
            TIMING_PORT        = thi.port_thi,
            HOST               = tfc.host_tfc,
            DEBUG              = debug)
        conf_order.append('tfc')

    if debug:
        the_system.export("global_system.dot")

    ####################################################################
    # Application command data generation
    ####################################################################
    from daqconf.core.conf_utils import make_app_command_data
    # Arrange per-app command data into the format used by util.write_json_files()
    app_command_datas = {
        name : make_app_command_data(the_system, app, name, verbose=debug)
        for name,app in the_system.apps.items()
    }

    # Make boot.json config
    from daqconf.core.conf_utils import make_system_command_datas, write_json_files
    system_command_datas = make_system_command_datas(
        boot,
        the_system,
        verbose=debug
    )

    write_json_files(app_command_datas, system_command_datas, json_dir, verbose=debug)

    console.log(f"Global aapp config generated in {json_dir}")

    write_metadata_file(json_dir, "daqconf_timing_gen", config_file)

if __name__ == '__main__':
    try:
        cli(show_default=True, standalone_mode=True)
    except Exception as e:
        console.print_exception()
